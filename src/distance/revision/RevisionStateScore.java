/**
 * 
 */
package distance.revision;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

import distance.RankingState;
import language.BeliefState;
import language.State;

/**
 * @author sam_t
 *
 * The GeneralRevisionScore class stores a pairing of a state and a score. Score values can represent anything, but are used to determine which states
 * will be selected for belief revision.
 *
 */
public class RevisionStateScore {
	
	private final double DEFAULT_SCORE = Double.MAX_VALUE;

	private HashMap<State, Double> scoremap;
	
	/*
	 * Default Constructor
	 * 	Initializes scoremap member variable
	 */
	public RevisionStateScore() {
		scoremap = new HashMap<State, Double>();
	}
	
	/*
	 * Initializes member variables, sets all states in the scoremap to the default score
	 * 
	 * Constructor
	 * @params
	 * 		BeliefState validstates: all valid states given a number of variables
	 */
	public RevisionStateScore(BeliefState validstates) {
		scoremap = new HashMap<State, Double>();
		
		for (State s : validstates.getBeliefs())
			scoremap.put(s, DEFAULT_SCORE);
	}
	
	/*
	 * scoremap getter
	 * @params	
	 * 		State s
	 * @return
	 * 		double score
	 */
	public double getScore(State s) {
		return scoremap.get(s);
	}
	
	/*
	 * scoremap setter
	 * @params
	 * 		State s
	 * 		double score
	 */
	public void setScore(State s, double score) {
		scoremap.put(s, score);
	}
	
//	/*
//	 * scoremap getter
//	 * @returns
//	 * 	scoremap hashmap<State,Double>
//	 */
//	public HashMap<State, Double> getScoreMap() {
//		return scoremap;
//	}
	
	/*
	 * Getter for the keyset of the scoremap variable
	 * 
	 * @return
	 * 	Set<State> keys in the scoremap
	 */
	public Set<State> getScoreKeys() {
		return scoremap.keySet();
	}
	
	/*
	 * Getter for the values found in the scoremap map
	 * 
	 * @return
	 * 	Collection<Double> values in the scoremap
	 */
	public Collection<Double> getScoreValues() {
		return scoremap.values();
	}

	/*
	 * Converts the scoremap to a BeliefState, Only the states with the minimum score are included in the belief state
	 * 
	 * @return
	 * 	BeliefState containing the states with the minimum score in the GeneralRevisionScore object
	 */
	//return min states
	public BeliefState scoreToBeliefState() {
		BeliefState beliefs = new BeliefState();
		double min = DEFAULT_SCORE;
		
		//find min score
		for (double val : scoremap.values())
			if (val < min)
				min = val;
		
		//add states with min score to the belief state
		for (State s: scoremap.keySet())
			if (scoremap.get(s) == min)
				beliefs.addBelief(s);
			
		return beliefs;
	}
	
	/*
	 * Converts the BeliefState generated by the GeneralRevisionScore object into a RankingState object
	 * 
	 * @return
	 * 	RankingState result of min score values
	 */
	public RankingState scoreToRank(ArrayList<Character> vocab) {
		return new RankingState(scoreToBeliefState(), vocab);
	}
	
}
